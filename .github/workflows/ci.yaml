# SPDX-FileCopyrightText: 2023 - 2024 Ali Sajid Imami
#
# SPDX-License-Identifier: Apache-2.0
# SPDX-License-Identifier: MIT

---
name: Continuous Integration
on:
    push:
        branches:
            - main
            - next
    pull_request:
        branches:
            - main
            - next
        types:
            - closed
    workflow_dispatch:

concurrency:
    group: CI-${{ github.ref }}
    cancel-in-progress: true

env:
    GIST_KEY: 2142caf9bfe6fc8cdc7d1b8ccd72ce09 # pragma: allowlist secret
    MINIMUM_WAIT: 3
    MAXIMUM_WAIT: 10
jobs:
    ci:
        runs-on: ${{matrix.os}}-latest
        if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true) || github.event_name == 'workflow_dispatch'
        outputs:
            result: ${{steps.result.outputs.result}}
        strategy:
            fail-fast: false
            matrix:
                rust:
                    - stable
                    - beta
                    - nightly
                    - 1.74.1 # MSRV
                os:
                    - windows
                    - ubuntu
                    - macos
                include:
                    - os: windows
                      logo: windows
                    - os: ubuntu
                      logo: ubuntu
                    - os: macos
                      logo: apple
                    - rust: 1.74.1 # MSRV
                      label: msrv
                    - rust: stable
                      label: stable
                    - rust: beta
                      label: beta
                    - rust: nightly
                      label: nightly
        steps:
            - name: Checkout Repository Code
              uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

            - name: Install mise-en-place
              uses: jdx/mise-action@v2
              env:
                MISE_ENV: "ci"
              with:
                experimental: true

            - name: Install Rust
              uses: dtolnay/rust-toolchain@a54c7afa936fefeb4456b2dd8068152669aa8203
              with:
                toolchain: ${{matrix.rust}}
                components: rustfmt, clippy

            - name: Install nightly Rust
              uses: dtolnay/rust-toolchain@a54c7afa936fefeb4456b2dd8068152669aa8203
              with:
                toolchain: nightly
                components: rustfmt, clippy

            - name: Cache dependencies
              uses: Swatinem/rust-cache@f0deed1e0edfc6a9be95417288c0e1099b1eeec3 # v2.7.7

            - name: Build and test the codebase
              run: mise run test

            - name: Wait before badge creation
              uses: AliSajid/random-wait-action@v2.7.1
              with:
                minimum: ${{env.MINIMUM_WAIT}}
                maximum: ${{env.MAXIMUM_WAIT}}

            - name: Create Awesome Badge - Success
              uses: schneegans/dynamic-badges-action@5d424ad4060f866e4d1dab8f8da0456e6b1c4f56 # v1.6.0
              if: success()
              with:
                auth: ${{secrets.GIST_SECRET}}
                gistID: ${{env.GIST_KEY}}
                filename: ${{matrix.os}}-${{matrix.label}}.json
                label: Build
                namedLogo: ${{matrix.logo}}
                message: Succeeded
                color: green

            - name: Create Awesome Badge - Failure
              uses: schneegans/dynamic-badges-action@5d424ad4060f866e4d1dab8f8da0456e6b1c4f56 # v1.6.0
              if: failure()
              with:
                auth: ${{secrets.GIST_SECRET}}
                gistID: ${{env.GIST_KEY}}
                filename: ${{matrix.os}}-${{matrix.label}}.json
                namedLogo: ${{matrix.logo}}
                label: Build
                message: Failed
                isError: true

            - name: Set Result
              if: always()
              id: result
              run: echo "result=${{job.status}}" >> "$GITHUB_OUTPUT"

    generate_code_coverage:
        uses: ./.github/workflows/code_coverage.yaml
        needs: [ci]
        secrets: inherit # pragma: allowlist secret

    generate_mdbook:
        uses: ./.github/workflows/deploy_mdbook.yaml
        needs: [ci]
        secrets: inherit # pragma: allowlist secret

    get-next-version:
        uses: ./.github/workflows/get_next_version.yaml
        needs: [ci]
        secrets: inherit # pragma: allowlist secret

    semantic-release:
        needs: [ci, get-next-version]
        if: ${{needs.get-next-version.outputs.new-release-published == 'true'}}
        uses: ./.github/workflows/release.yaml
        secrets: inherit # pragma: allowlist secret
